
#pragma once

#include "Math"
#include <string>
#include <memory>


namespace crib::Graphics
{
	class Context;
}

namespace crib::App
{

	int run();


	class Window
	{
	public:
		struct Options;
		enum class Engine;

		Window();
		Window(Options);

		virtual ~Window();

		Window(const Window&) = delete;
		Window(Window&& other) { *this = std::move(other); }
		Window& operator=(const Window&) = delete;
		Window& operator=(Window&& other)
		{
			if (this != &other)
			{
				impl = other.impl;
				context = other.context;
				other.impl = nullptr;
				other.context = nullptr;
			}
			return *this;
		}

		Options getOptions() const;
		Window& setOptions(const Options&);

		void* impl = nullptr;
		Graphics::Context* context = nullptr;
	};

	struct Window::Options
	{
		std::string title;
		int2 pos;
		int2 size;
		Engine preferEngine;
		// TODO: anti-aliasing settings
		// TODO: constant redraw or redraw on change?
	};

	enum class Window::Engine {
		any,
#if _WIN32
		d3d11,
		d3d12,
#endif
		openGL,
		vulkan,
#if __APPLE__
		metal,
#endif
	};

}
